'use client';\n\nimport React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { useRouter } from 'next/navigation';\n\n// Tipagem para os dados do usuário e do contexto\ninterface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (email: string, password: string) => Promise<boolean>;\n  logout: () => void;\n  isLoading: boolean;\n  error: string | null;\n}\n\n// Cria o contexto com um valor padrão undefined\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Componente Provedor do Contexto\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    // Tenta carregar o token e os dados do usuário do localStorage ao iniciar\n    const storedToken = localStorage.getItem('authToken');\n    const storedUser = localStorage.getItem('authUser');\n    if (storedToken && storedUser) {\n      setToken(storedToken);\n      setUser(JSON.parse(storedUser));\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string): Promise<boolean> => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('/api/auth/login', { // O endpoint do nosso backend\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Falha no login');\n      }\n\n      const data = await response.json();\n      setToken(data.token);\n      setUser(data.user);\n\n      // Armazena no localStorage para persistir a sessão\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('authUser', JSON.stringify(data.user));\n      \n      return true;\n    } catch (err: any) {\n      setError(err.message);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('authUser');\n    router.push('/login');\n  };\n\n  const value = {\n    user,\n    token,\n    login,\n    logout,\n    isLoading,\n    error,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// Hook customizado para usar o contexto de autenticação\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n 