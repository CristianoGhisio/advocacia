---
description: "Padr√µes de acessibilidade (A11y) baseados na metodologia THINK"
globs: ["**/*.tsx", "**/*.jsx", "**/*.html"]
alwaysApply: true
---

# ‚ôø ACESSIBILIDADE (A11Y) - PADR√ïES INCLUSIVOS

## üéØ PRINC√çPIOS FUNDAMENTAIS

### üåü **WCAG 2.1 AA Compliance**
- **Perceivable**: Informa√ß√£o apresentada de forma percept√≠vel
- **Operable**: Interface oper√°vel para todos os usu√°rios
- **Understandable**: Informa√ß√£o e UI compreens√≠veis
- **Robust**: Conte√∫do robusto para diferentes tecnologias

### üîß **Implementa√ß√£o Obrigat√≥ria**
- Sempre implementar A11y desde o in√≠cio
- Testar com screen readers durante desenvolvimento
- Validar navega√ß√£o por teclado
- Garantir contraste adequado de cores

## üé® PADR√ïES VISUAIS

### üåà **Contraste de Cores**
```css
/* ‚úÖ CORRETO: Contraste adequado */
.primary-text {
  color: #1a1a1a; /* Contraste 4.5:1 ou maior */
  background: #ffffff;
}

.secondary-text {
  color: #666666; /* Contraste 3:1 m√≠nimo para texto grande */
  background: #ffffff;
}

/* ‚ùå INCORRETO: Contraste insuficiente */
.bad-contrast {
  color: #cccccc; /* Contraste muito baixo */
  background: #ffffff;
}
```

### üìè **Tamanhos de Fonte e Espa√ßamento**
```css
/* ‚úÖ CORRETO: Tamanhos acess√≠veis */
.readable-text {
  font-size: 16px; /* M√≠nimo 16px para texto corpo */
  line-height: 1.5; /* Espa√ßamento adequado */
  letter-spacing: 0.12em; /* Para melhor legibilidade */
}

.touch-target {
  min-height: 44px; /* M√≠nimo 44px para touch targets */
  min-width: 44px;
  padding: 12px 16px;
}
```

## ‚å®Ô∏è NAVEGA√á√ÉO POR TECLADO

### üéØ **Focus Management**
```typescript
// ‚úÖ CORRETO: Focus management adequado
const Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {
  const modalRef = useRef<HTMLDivElement>(null);
  const previousActiveElement = useRef<HTMLElement>();

  useEffect(() => {
    if (isOpen) {
      // Salvar elemento ativo anterior
      previousActiveElement.current = document.activeElement as HTMLElement;
      
      // Focar no modal
      modalRef.current?.focus();
      
      // Trap focus dentro do modal
      const handleKeyDown = (e: KeyboardEvent) => {
        if (e.key === 'Escape') {
          onClose();
        }
        
        if (e.key === 'Tab') {
          trapFocus(e, modalRef.current);
        }
      };
      
      document.addEventListener('keydown', handleKeyDown);
      
      return () => {
        document.removeEventListener('keydown', handleKeyDown);
        // Restaurar focus anterior
        previousActiveElement.current?.focus();
      };
    }
  }, [isOpen, onClose]);

  return (
    <div
      ref={modalRef}
      role="dialog"
      aria-modal="true"
      aria-labelledby="modal-title"
      tabIndex={-1}
      className="modal"
    >
      {children}
    </div>
  );
};
```

### üîÑ **Skip Links**
```typescript
// ‚úÖ CORRETO: Skip links para navega√ß√£o r√°pida
const SkipLinks: React.FC = () => (
  <div className="skip-links">
    <a href="#main-content" className="skip-link">
      Pular para conte√∫do principal
    </a>
    <a href="#navigation" className="skip-link">
      Pular para navega√ß√£o
    </a>
    <a href="#search" className="skip-link">
      Pular para busca
    </a>
  </div>
);
```

## üè∑Ô∏è SEMANTIC HTML E ARIA

### üìù **Estrutura Sem√¢ntica**
```typescript
// ‚úÖ CORRETO: HTML sem√¢ntico
const Dashboard: React.FC = () => (
  <main id="main-content" role="main">
    <header>
      <h1>Dashboard do Cliente</h1>
      <nav aria-label="Navega√ß√£o principal">
        <ul>
          <li><a href="/reservas">Minhas Reservas</a></li>
          <li><a href="/creditos">Meus Cr√©ditos</a></li>
        </ul>
      </nav>
    </header>
    
    <section aria-labelledby="reservas-title">
      <h2 id="reservas-title">Reservas Recentes</h2>
      <div role="list" aria-label="Lista de reservas">
        {reservations.map(reservation => (
          <article 
            key={reservation.id}
            role="listitem"
            aria-labelledby={`reservation-${reservation.id}`}
          >
            <h3 id={`reservation-${reservation.id}`}>
              {reservation.service}
            </h3>
            <p aria-label={`Data: ${formatDate(reservation.date)}`}>
              {formatDate(reservation.date)}
            </p>
          </article>
        ))}
      </div>
    </section>
  </main>
);
```

### üè∑Ô∏è **ARIA Labels e Descriptions**
```typescript
// ‚úÖ CORRETO: ARIA adequado
const ReservationCard: React.FC<ReservationCardProps> = ({ reservation }) => (
  <div
    role="article"
    aria-labelledby={`title-${reservation.id}`}
    aria-describedby={`desc-${reservation.id}`}
  >
    <h3 id={`title-${reservation.id}`}>
      {reservation.service}
    </h3>
    
    <p id={`desc-${reservation.id}`}>
      Reserva para {formatDate(reservation.date)} √†s {formatTime(reservation.time)}
    </p>
    
    <button
      aria-label={`Cancelar reserva de ${reservation.service} para ${formatDate(reservation.date)}`}
      onClick={() => handleCancel(reservation.id)}
    >
      Cancelar
    </button>
    
    <div
      role="status"
      aria-live="polite"
      aria-label={`Status da reserva: ${reservation.status}`}
    >
      <span className={`status status-${reservation.status.toLowerCase()}`}>
        {reservation.status}
      </span>
    </div>
  </div>
);
```

## üì± RESPONSIVE E MOBILE A11Y

### üì≤ **Touch Accessibility**
```css
/* ‚úÖ CORRETO: Touch targets adequados */
.mobile-button {
  min-height: 44px;
  min-width: 44px;
  padding: 12px;
  margin: 8px;
  
  /* √Årea de toque expandida */
  position: relative;
}

.mobile-button::before {
  content: '';
  position: absolute;
  top: -8px;
  left: -8px;
  right: -8px;
  bottom: -8px;
  /* √Årea invis√≠vel mas clic√°vel */
}

/* Zoom responsivo */
@media (max-width: 768px) {
  .responsive-text {
    font-size: clamp(16px, 4vw, 20px);
    line-height: 1.6;
  }
}
```

### üîÑ **Orientation Support**
```css
/* ‚úÖ CORRETO: Suporte a orienta√ß√£o */
@media (orientation: landscape) and (max-height: 500px) {
  .mobile-layout {
    flex-direction: row;
    height: 100vh;
  }
}

@media (orientation: portrait) {
  .mobile-layout {
    flex-direction: column;
  }
}
```

## üîä SCREEN READER SUPPORT

### üì¢ **Live Regions**
```typescript
// ‚úÖ CORRETO: An√∫ncios para screen readers
const useAnnouncements = () => {
  const [announcement, setAnnouncement] = useState('');
  
  const announce = (message: string, priority: 'polite' | 'assertive' = 'polite') => {
    setAnnouncement(message);
    
    // Limpar ap√≥s an√∫ncio
    setTimeout(() => setAnnouncement(''), 1000);
  };
  
  return { announcement, announce };
};

const AnnouncementRegion: React.FC = () => {
  const { announcement } = useAnnouncements();
  
  return (
    <>
      <div
        role="status"
        aria-live="polite"
        aria-atomic="true"
        className="sr-only"
      >
        {announcement}
      </div>
      
      <div
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
        className="sr-only"
      >
        {/* Para mensagens urgentes */}
      </div>
    </>
  );
};
```

### üéØ **Content Structure**
```typescript
// ‚úÖ CORRETO: Estrutura clara para screen readers
const FormField: React.FC<FormFieldProps> = ({ 
  label, 
  error, 
  required, 
  children 
}) => {
  const fieldId = useId();
  const errorId = `${fieldId}-error`;
  const descId = `${fieldId}-desc`;
  
  return (
    <div className="form-field">
      <label htmlFor={fieldId} className="form-label">
        {label}
        {required && (
          <span aria-label="obrigat√≥rio" className="required">
            *
          </span>
        )}
      </label>
      
      {React.cloneElement(children, {
        id: fieldId,
        'aria-describedby': error ? `${errorId} ${descId}` : descId,
        'aria-invalid': !!error,
        'aria-required': required
      })}
      
      {error && (
        <div
          id={errorId}
          role="alert"
          aria-live="polite"
          className="form-error"
        >
          {error}
        </div>
      )}
    </div>
  );
};
```

## üß™ TESTING A11Y

### üîç **Automated Testing**
```typescript
// ‚úÖ CORRETO: Testes automatizados de A11y
import { axe, toHaveNoViolations } from 'jest-axe';

expect.extend(toHaveNoViolations);

describe('ReservationCard A11y', () => {
  it('should not have accessibility violations', async () => {
    const { container } = render(
      <ReservationCard reservation={mockReservation} />
    );
    
    const results = await axe(container);
    expect(results).toHaveNoViolations();
  });
  
  it('should be keyboard navigable', () => {
    render(<ReservationCard reservation={mockReservation} />);
    
    const cancelButton = screen.getByRole('button', { 
      name: /cancelar reserva/i 
    });
    
    // Testar navega√ß√£o por teclado
    cancelButton.focus();
    expect(cancelButton).toHaveFocus();
    
    fireEvent.keyDown(cancelButton, { key: 'Enter' });
    // Verificar se a√ß√£o foi executada
  });
  
  it('should announce status changes', async () => {
    const { rerender } = render(
      <ReservationCard reservation={mockReservation} />
    );
    
    const statusRegion = screen.getByRole('status');
    expect(statusRegion).toHaveTextContent('CONFIRMADO');
    
    rerender(
      <ReservationCard 
        reservation={{ ...mockReservation, status: 'CANCELADO' }} 
      />
    );
    
    await waitFor(() => {
      expect(statusRegion).toHaveTextContent('CANCELADO');
    });
  });
});
```

### üìã **Manual Testing Checklist**
```typescript
// ‚úÖ CORRETO: Checklist de testes manuais
const A11Y_TESTING_CHECKLIST = {
  keyboard: [
    'Tab navigation works correctly',
    'Enter/Space activate buttons',
    'Escape closes modals/dropdowns',
    'Arrow keys navigate lists/menus',
    'Focus is visible and logical'
  ],
  
  screenReader: [
    'All content is announced',
    'Headings create proper outline',
    'Form labels are associated',
    'Status changes are announced',
    'Error messages are clear'
  ],
  
  visual: [
    'Color contrast meets WCAG AA',
    'Focus indicators are visible',
    'Text scales to 200% without horizontal scroll',
    'Touch targets are at least 44x44px',
    'Content reflows properly'
  ],
  
  cognitive: [
    'Instructions are clear',
    'Error messages are helpful',
    'Time limits can be extended',
    'Complex interactions have help',
    'Consistent navigation patterns'
  ]
};
```

## üìã A11Y CHECKLIST

### ‚úÖ **Desenvolvimento**
- [ ] **HTML Sem√¢ntico**: Usar elementos apropriados
- [ ] **ARIA Labels**: Implementar onde necess√°rio
- [ ] **Keyboard Navigation**: Testar navega√ß√£o completa
- [ ] **Focus Management**: Implementar focus trap em modais
- [ ] **Color Contrast**: Verificar contraste adequado
- [ ] **Touch Targets**: M√≠nimo 44x44px
- [ ] **Screen Reader**: Testar com NVDA/JAWS/VoiceOver

### ‚úÖ **Testing**
- [ ] **Automated Tests**: axe-core integrado
- [ ] **Manual Testing**: Keyboard e screen reader
- [ ] **Mobile A11y**: Testar em dispositivos reais
- [ ] **Cognitive Load**: Interface intuitiva
- [ ] **Error Handling**: Mensagens claras e √∫teis

## üö´ ANTI-PATTERNS A11Y

### ‚ùå **Problemas Comuns**
```typescript
// ‚ùå INCORRETO: Problemas de acessibilidade
<div onClick={handleClick}>Clique aqui</div> // N√£o √© foc√°vel
<img src="logo.png" /> // Sem alt text
<input placeholder="Nome" /> // Sem label
<div role="button">Bot√£o</div> // Sem keyboard support

// ‚úÖ CORRETO: Implementa√ß√£o acess√≠vel
<button onClick={handleClick}>Clique aqui</button>
<img src="logo.png" alt="Logo da empresa" />
<label htmlFor="name">Nome</label>
<input id="name" type="text" />
<button role="button" onKeyDown={handleKeyDown}>Bot√£o</button>
```

### ‚ùå **Focus Traps Incorretos**
```typescript
// ‚ùå INCORRETO: Focus perdido
const Modal = ({ isOpen }) => {
  if (!isOpen) return null;
  
  return (
    <div className="modal">
      <button onClick={closeModal}>√ó</button>
      <p>Conte√∫do do modal</p>
    </div>
  );
};

// ‚úÖ CORRETO: Focus management adequado
const Modal = ({ isOpen, onClose }) => {
  const modalRef = useRef();
  
  useEffect(() => {
    if (isOpen) {
      const previousFocus = document.activeElement;
      modalRef.current?.focus();
      
      return () => {
        previousFocus?.focus();
      };
    }
  }, [isOpen]);
  
  if (!isOpen) return null;
  
  return (
    <div
      ref={modalRef}
      role="dialog"
      aria-modal="true"
      tabIndex={-1}
      onKeyDown={handleKeyDown}
    >
      <button onClick={onClose} aria-label="Fechar modal">
        √ó
      </button>
      <p>Conte√∫do do modal</p>
    </div>
  );
};
``` 