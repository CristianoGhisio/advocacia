---
description: "Regras específicas do projeto modern-dashboard-visions"
globs: ["**/*"]
alwaysApply: true
---

# 🏗️ PROJETO MODERN-DASHBOARD-VISIONS - REGRAS ESPECÍFICAS

## 📊 ARQUITETURA DO PROJETO

### 🌐 **Stack Tecnológico**
```
modern-dashboard-visions/
├── 📱 frontend/ (React + TypeScript + Vite)
│   ├── src/components/ (UI Components)
│   ├── src/pages/ (Page Components)
│   ├── src/services/ (API Communication)
│   └── src/types/ (TypeScript Definitions)
├── 🏗️ backend/ (Node.js + Express + Prisma)
│   ├── src/controllers/ (Route Handlers)
│   ├── src/services/ (Business Logic)
│   ├── src/routes/ (API Routes)
│   └── prisma/ (Database Schema)
└── 📚 docs/ (Documentation)
```

### 🔗 **Integração Frontend-Backend**
- **Frontend Port**: 8080 (Vite dev server)
- **Backend Port**: 3000 (Express server)
- **Database**: PostgreSQL via Prisma ORM
- **Authentication**: JWT tokens
- **API Pattern**: RESTful com validação Zod

## 🎯 COMANDOS ESPECÍFICOS DO PROJETO

### 🚀 **Scripts de Desenvolvimento**
```bash
# Iniciar servidores (usar scripts prontos)
npm run dev              # Root: inicia ambos os servidores
cd frontend && npm run dev    # Frontend apenas
cd backend && npm run dev     # Backend apenas

# Database
cd backend && npx prisma studio    # Interface do banco
cd backend && npx prisma migrate dev    # Migrations

# Build
cd frontend && npm run build    # Build de produção
```

### 📋 **Estrutura de Comandos por Contexto**
```bash
# Para bugs de UI/Frontend:
cd frontend
npm run dev
# Investigar em: src/components/, src/pages/, src/services/

# Para bugs de API/Backend:
cd backend
npm run dev
npx prisma studio
# Investigar em: src/controllers/, src/services/, src/routes/

# Para bugs de Database:
cd backend
npx prisma studio
npx prisma migrate dev
# Investigar em: prisma/schema.prisma, migrations/
```

## 🔍 PADRÕES DE INVESTIGAÇÃO ESPECÍFICOS

### 🎯 **Para Problemas de Reservas**
```bash
# Investigação paralela obrigatória:
- codebase_search: "reservation" OR "reserva"
- grep_search: "ReservationService" OR "reservaService"
- read_file: "backend/src/services/reservaService.ts"
- read_file: "frontend/src/services/reservaService.ts"
- file_search: "reservation" (buscar componentes relacionados)
```

### 🎯 **Para Problemas de Créditos**
```bash
# Investigação paralela obrigatória:
- codebase_search: "credit" OR "credito"
- grep_search: "CreditService" OR "creditoService"
- read_file: "backend/src/services/creditoService.ts"
- read_file: "frontend/src/services/creditoService.ts"
- web_search: "sistema creditos spa nodejs best practices"
```

### 🎯 **Para Problemas de Autenticação**
```bash
# Investigação paralela obrigatória:
- codebase_search: "auth" OR "login" OR "token"
- grep_search: "AuthContext" OR "useAuth"
- read_file: "frontend/src/contexts/AuthContext.tsx"
- read_file: "backend/src/middleware/auth.ts"
- read_file: "backend/src/controllers/authController.ts"
```

## 🏗️ PADRÕES ARQUITETURAIS DO PROJETO

### 📡 **API Communication Pattern**
```typescript
// ✅ PADRÃO DO PROJETO: Service layer
// frontend/src/services/baseService.ts
export class BaseService {
  protected async request<T>(
    endpoint: string,
    options: RequestOptions = {}
  ): Promise<T> {
    const token = getAuthToken();
    
    console.log('📡 API Request:', {
      endpoint,
      method: options.method || 'GET',
      hasToken: !!token,
      timestamp: new Date().toISOString()
    });

    try {
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...(token && { 'Authorization': `Bearer ${token}` }),
          ...options.headers
        }
      });

      console.log('📥 API Response:', {
        endpoint,
        status: response.status,
        ok: response.ok
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('❌ API Error:', {
        endpoint,
        error: error.message
      });
      throw error;
    }
  }
}
```

### ⚛️ **React Component Pattern**
```typescript
// ✅ PADRÃO DO PROJETO: Page components
// frontend/src/pages/client/Dashboard.tsx
export const Dashboard: React.FC = () => {
  const { user } = useAuth();
  const { data: reservations, isLoading, error } = useReservations(user?.id);

  console.log('⚛️ Dashboard Mount:', {
    userId: user?.id,
    hasReservations: !!reservations?.length,
    isLoading,
    error: error?.message
  });

  if (isLoading) return <DashboardSkeleton />;
  if (error) return <ErrorMessage error={error} />;

  return (
    <div className="dashboard">
      <Header user={user} />
      <MainContent reservations={reservations} />
      <Sidebar />
    </div>
  );
};
```

### 🏗️ **Backend Controller Pattern**
```typescript
// ✅ PADRÃO DO PROJETO: Controller + Service
// backend/src/controllers/reservaController.ts
export const createReservation = async (req: Request, res: Response) => {
  const traceId = generateTraceId();
  
  console.log('🎯 Create Reservation Request:', {
    traceId,
    userId: req.user?.id,
    body: sanitizePayload(req.body)
  });

  try {
    const validatedData = CreateReservationSchema.parse(req.body);
    
    const reservation = await reservaService.create({
      ...validatedData,
      userId: req.user!.id
    });

    console.log('✅ Reservation Created:', {
      traceId,
      reservationId: reservation.id,
      status: reservation.status
    });

    res.status(201).json({
      success: true,
      data: reservation,
      meta: { traceId }
    });
  } catch (error) {
    console.error('❌ Create Reservation Error:', {
      traceId,
      error: error.message,
      stack: error.stack
    });

    res.status(500).json({
      success: false,
      error: 'Failed to create reservation',
      meta: { traceId }
    });
  }
};
```

## 📋 CHECKLIST ESPECÍFICO DO PROJETO

### ✅ **Antes de Implementar Funcionalidade**
- [ ] Verificar se existe service layer correspondente
- [ ] Validar schema Prisma se envolve database
- [ ] Verificar autenticação/autorização necessária
- [ ] Implementar logging em frontend e backend
- [ ] Testar integração entre camadas

### ✅ **Para Bugs de Reservas**
- [ ] Verificar reservaService (frontend e backend)
- [ ] Validar schema de Reservation no Prisma
- [ ] Testar fluxo completo: UI → API → Database
- [ ] Verificar integração com sistema de créditos
- [ ] Validar regras de negócio (horários, disponibilidade)

### ✅ **Para Bugs de Créditos**
- [ ] Verificar creditoService (frontend e backend)
- [ ] Validar transações de débito/crédito
- [ ] Testar sincronização com reservas
- [ ] Verificar saldo e histórico
- [ ] Validar regras de negócio (mínimo, máximo)

## 🚫 ANTI-PATTERNS ESPECÍFICOS DO PROJETO

### ❌ **Não Seguir Estrutura de Pastas**
```typescript
// ❌ INCORRETO: Arquivo na pasta errada
// frontend/src/utils/ReservationCard.tsx

// ✅ CORRETO: Seguir estrutura estabelecida
// frontend/src/components/ReservationCard.tsx
```

### ❌ **Não Usar Service Layer**
```typescript
// ❌ INCORRETO: Fetch direto no componente
const Component = () => {
  const [data, setData] = useState([]);
  
  useEffect(() => {
    fetch('/api/reservations')
      .then(res => res.json())
      .then(setData);
  }, []);
};

// ✅ CORRETO: Usar service layer
const Component = () => {
  const { data, isLoading, error } = useReservations();
  // Service layer handle fetch, caching, error handling
};
```

### ❌ **Não Implementar Logging Adequado**
```typescript
// ❌ INCORRETO: Sem logging
const createReservation = async (data) => {
  return await reservaService.create(data);
};

// ✅ CORRETO: Com logging estruturado
const createReservation = async (data) => {
  console.log('🎯 Creating Reservation:', {
    userId: data.userId,
    serviceId: data.serviceId,
    timestamp: new Date().toISOString()
  });
  
  try {
    const result = await reservaService.create(data);
    
    console.log('✅ Reservation Created:', {
      id: result.id,
      status: result.status
    });
    
    return result;
  } catch (error) {
    console.error('❌ Reservation Creation Failed:', {
      error: error.message,
      data: sanitizePayload(data)
    });
    throw error;
  }
};
```

## 🎯 DEBUGGING ESPECÍFICO DO PROJETO

### 🔍 **Fluxo de Debugging para Reservas**
1. **Frontend**: Verificar useReservations hook e ReservationCard
2. **Service**: Verificar reservaService (frontend e backend)
3. **API**: Verificar reservaController e routes
4. **Database**: Verificar schema Prisma e queries
5. **Integration**: Verificar creditoService integration

### 🔍 **Logs Específicos para Acompanhar**
```typescript
// Logs críticos do projeto:
console.log('🔐 Auth Check:', { hasToken, userRole });
console.log('📡 API Call:', { endpoint, method, userId });
console.log('💳 Credit Check:', { userId, currentBalance, requiredAmount });
console.log('📅 Reservation Flow:', { step, data, status });
console.log('🔄 State Change:', { component, from, to, trigger });
``` 