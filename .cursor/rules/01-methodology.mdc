---
description: "Metodologia THINK → REFLECT → PLAN → EXECUTE → VERIFY → LEARN - Framework principal para resolução de problemas"
globs: ["**/*"]
alwaysApply: true
---

# 🚀 METODOLOGIA THINK - REGRAS FUNDAMENTAIS

## ⚡ PRINCÍPIO FUNDAMENTAL
**SEMPRE seguir a metodologia THINK → REFLECT → PLAN → EXECUTE → VERIFY → LEARN para qualquer tarefa de desenvolvimento.**

## 📋 PROCESSO OBRIGATÓRIO

### 🧠 PASSO 1: THINK (ANÁLISE PROFUNDA)
**ANTES de qualquer implementação:**

1. **Classificar o problema:**
   - 🐛 Bug / ⚡ Feature / 🔧 Melhoria / 🏗️ Arquitetura
   - 🔥 Crítica / ⚠️ Alta / 📋 Normal / 📅 Baixa urgência
   - 🎯 Simples / 🔧 Média / 🏗️ Complexa / 🌐 Sistêmica

2. **Perguntas obrigatórias:**
   - O QUE exatamente precisa ser feito?
   - ONDE o problema/feature se manifesta?
   - QUEM é impactado?
   - COMO reproduzir/implementar?
   - POR QUE é importante?

3. **Mapear arquitetura:**
   - Frontend (React, TypeScript, Services)
   - Backend (Controllers, Services, Business Logic)
   - Database (Schema, Queries, Migrations)
   - Integrations (APIs externas)

### 🤔 PASSO 2: REFLECT (ANÁLISE CRÍTICA)
**Formar hipóteses estruturadas:**

1. **Matriz 4D para cada hipótese:**
   - Probabilidade (1-10)
   - Testabilidade (1-10) 
   - Impacto (1-10)
   - Effort (1-10)

2. **Score = (Probabilidade × 3) + (Impacto × 2) + (10 - Effort) + Testabilidade**

3. **Evitar armadilhas comuns:**
   - Double Data Access
   - Type Mismatches
   - State Sync Issues
   - Over-Engineering
   - Solution Bias

### 📊 PASSO 3: PLAN (PLANEJAMENTO)
**SEMPRE criar TODO.md com:**
- Objetivo & Contexto
- Stakeholders
- Hipóteses priorizadas
- Research insights
- Plano de execução detalhado
- Critérios de sucesso

### ⚡ PASSO 4: EXECUTE (EXECUÇÃO)
**Implementação sistemática:**
- Investigação paralela (usar múltiplas ferramentas simultaneamente)
- Logging estratégico em todas as camadas
- Padrões modernos 2024
- Type Safety First
- Performance by Default

### ✅ PASSO 5: VERIFY (VALIDAÇÃO)
**Checklist obrigatório:**
- Funcionalidade (core feature, edge cases, error handling)
- Performance (< 3s loading, < 500ms API)
- UX/UI (responsive, loading states, error states)
- Accessibility (keyboard, screen reader, contrast)
- Security (sanitization, auth, authorization)

### 📚 PASSO 6: LEARN (APRENDIZADO)
**Sempre documentar:**
- Post-mortem com insights
- Padrões identificados
- Melhorias para próxima vez
- Knowledge base updates

## 🚫 PROIBIÇÕES ABSOLUTAS
- ❌ NUNCA pular a análise inicial (THINK)
- ❌ NUNCA implementar sem plano claro
- ❌ NUNCA fazer mudanças sem logging
- ❌ NUNCA deployar sem validação completa
- ❌ NUNCA deixar de documentar aprendizados

## ✅ COMPORTAMENTOS OBRIGATÓRIOS
- ✅ SEMPRE usar ferramentas em paralelo
- ✅ SEMPRE implementar logging defensivo
- ✅ SEMPRE validar com checklist completo
- ✅ SEMPRE documentar decisões e learnings
- ✅ SEMPRE priorizar qualidade sobre velocidade 