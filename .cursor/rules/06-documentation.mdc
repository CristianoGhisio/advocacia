---
description: "Padrões de documentação e aprendizado baseados na metodologia THINK"
globs: ["**/*.md", "**/*.mdx"]
alwaysApply: true
---

# 📚 DOCUMENTAÇÃO E APRENDIZADO - KNOWLEDGE MANAGEMENT

## 📝 DOCUMENTAÇÃO OBRIGATÓRIA

### 🎯 **TODO.md Template (SEMPRE CRIAR)**
```markdown
# TODO - [Problema/Feature] - [Data]

## 🎯 OBJETIVO & CONTEXTO
**Problema**: [Descrição específica e mensurável]
**Meta**: [Resultado esperado após correção]
**Business Impact**: [Como afeta usuários/negócio]
**Technical Context**: [Stack, componentes, dependências]

## 👥 STAKEHOLDERS
- **Owner**: [Responsável pela decisão final]
- **Technical**: [Devs, arquitetos envolvidos]  
- **Business**: [PO, usuários, clientes afetados]
- **Review**: [Quem precisa aprovar a solução]

## 🤔 HIPÓTESES PRIORIZADAS (Score)
1. 🥇 [Hipótese + evidências + score] 
2. 🥈 [Segunda hipótese + evidências + score]
3. 🥉 [Terceira hipótese + evidências + score]

## 🌐 RESEARCH INSIGHTS
- **Soluções Existentes**: [Links e resumo]
- **Best Practices**: [Padrões recomendados]
- **Anti-Patterns**: [O que evitar]
- **Lessons Learned**: [Experiências anteriores]

## 📋 PLANO DE EXECUÇÃO
### 🔍 Investigação (Paralela)
- [ ] [Hipótese 1: ferramentas e abordagem]
- [ ] [Hipótese 2: ferramentas e abordagem]
- [ ] [Logging estratégico nos pontos críticos]

### 🛠️ Implementação
- [ ] [Solução mínima viável]
- [ ] [Testes automatizados]
- [ ] [Documentação técnica]
- [ ] [Code review]

### ✅ Validação
- [ ] [Testes funcionais]
- [ ] [Testes de regressão]
- [ ] [Performance testing]
- [ ] [User acceptance]

## 🎯 CRITÉRIOS DE SUCESSO
**Funcionais**:
- [ ] [Comportamento esperado funciona]
- [ ] [Edge cases cobertos]
- [ ] [Performance dentro do SLA]

**Não-Funcionais**:
- [ ] [Sem regressões]
- [ ] [Código maintível]
- [ ] [Documentação atualizada]
```

### 📊 **Post-Mortem Template (SEMPRE APÓS CONCLUSÃO)**
```markdown
# POST-MORTEM - [Problema/Feature] - [Data Finalização]

## 📊 RESUMO EXECUTIVO
**Problema**: [O que foi resolvido]
**Solução**: [Como foi resolvido]
**Tempo Total**: [Horas gastas]
**Impacto**: [Usuários/sistemas afetados]

## 🎯 O QUE FUNCIONOU BEM
- [Decisões certas, ferramentas úteis, processos eficientes]
- [Abordagens que economizaram tempo]
- [Colaborações produtivas]

## 🚫 O QUE NÃO FUNCIONOU
- [Armadilhas que caímos]
- [Tempo perdido em abordagens erradas]
- [Gaps de comunicação/processo]

## 💡 INSIGHTS E APRENDIZADOS
- [Padrões identificados]
- [Técnicas novas aprendidas]
- [Correlações descobertas]

## 🔧 MELHORIAS PARA PRÓXIMA VEZ
**Processo**:
- [Ajustes na metodologia]
- [Ferramentas adicionais necessárias]

**Técnico**:
- [Padrões para adotar]
- [Anti-patterns para evitar]

**Colaboração**:
- [Stakeholders para envolver mais cedo]
- [Comunicação para melhorar]

## 📚 KNOWLEDGE BASE UPDATE
- [ ] Documentação técnica atualizada
- [ ] Runbooks/playbooks criados
- [ ] FAQs atualizados
- [ ] Best practices documentadas

## 🎯 ACTION ITEMS
- [ ] [Item específico + responsável + prazo]
- [ ] [Processo/ferramenta para implementar]
- [ ] [Conhecimento para compartilhar com equipe]
```

## 🏗️ ARCHITECTURE DECISION RECORDS (ADR)

### 📋 **ADR Template**
```markdown
# ADR-001: [Decision Title]

## Status
[Proposed | Accepted | Deprecated | Superseded]

## Context
[Situation and constraints that led to this decision]

## Decision
[The change that we're making]

## Consequences
**Positive:**
- [Good outcomes expected]

**Negative:**  
- [Trade-offs and potential issues]

**Neutral:**
- [Other implications]

## Alternatives Considered
- [Option 1: Pros/Cons]
- [Option 2: Pros/Cons]

## Follow-up Actions
- [ ] [Implementation tasks]
- [ ] [Monitoring/validation needed]
```

## 📚 KNOWLEDGE MANAGEMENT

### 🧠 **Classificação de Learnings**
```
📚 TIPOS DE CONHECIMENTO:
├── 🎯 TACTICAL (Solução específica)
│   ├── Bug fix patterns
│   ├── Configuration recipes  
│   └── Quick debugging tips
├── 🏗️ STRATEGIC (Arquitetura/Design)
│   ├── System design patterns
│   ├── Technology decisions
│   └── Architecture trade-offs
└── 🧠 CULTURAL (Processo/Pessoas)
    ├── Communication improvements
    ├── Collaboration patterns
    └── Decision-making processes
```

## 📊 DOCUMENTATION STANDARDS

### ✅ **Code Documentation**
```typescript
/**
 * Processa resposta da API com fallbacks defensivos
 * 
 * @param response - Resposta da API (pode ser null/undefined)
 * @param options - Opções de processamento
 * @returns Dados processados com metadata
 * 
 * @example
 * ```typescript
 * const result = processApiResponse(apiResponse, {
 *   schema: UserSchema,
 *   fallback: []
 * });
 * ```
 */
const processApiResponse = <T>(
  response: ApiResponse<T>,
  options: ProcessingOptions = {}
): ProcessedData<T> => {
  // Implementation...
};
```

### ✅ **Component Documentation**
```typescript
interface ReservationCardProps {
  /** Dados da reserva */
  reservation: Reservation;
  /** Callback executado ao cancelar reserva */
  onCancel?: (id: number) => void;
  /** Se deve mostrar botões de ação */
  showActions?: boolean;
}

/**
 * Card que exibe informações de uma reserva
 * 
 * @example
 * ```tsx
 * <ReservationCard 
 *   reservation={reservation}
 *   onCancel={handleCancel}
 *   showActions={canEdit}
 * />
 * ```
 */
export const ReservationCard: React.FC<ReservationCardProps> = ({
  reservation,
  onCancel,
  showActions = true
}) => {
  // Implementation...
};
```

## 📋 DOCUMENTATION CHECKLIST

### ✅ **Antes de Commit**
- [ ] TODO.md criado para tarefas complexas
- [ ] Código documentado com JSDoc/TSDoc
- [ ] README atualizado se necessário
- [ ] Changelog atualizado
- [ ] Links de referência funcionando

### ✅ **Após Conclusão**
- [ ] Post-mortem documentado
- [ ] Learnings compartilhados com equipe
- [ ] Knowledge base atualizada
- [ ] ADR criado para decisões arquiteturais
- [ ] Runbooks/playbooks atualizados

## 🚫 ANTI-PATTERNS EM DOCUMENTAÇÃO

### ❌ **Documentação Desatualizada**
```markdown
// ❌ INCORRETO: Documentação que não reflete a realidade
## Como usar a API v1.0
Esta API usa autenticação básica... (API já é v2.0 com OAuth!)
```

### ❌ **Documentação Sem Contexto**
```markdown
// ❌ INCORRETO: Solução sem explicar o problema
## Fix
Changed line 42 in utils.js

// ✅ CORRETO: Contexto + solução + rationale
## Bug Fix: Data Processing Error
**Problem**: API responses with nested arrays were causing crashes
**Solution**: Added defensive parsing in processApiResponse()
**Why**: Multiple API endpoints return different data structures
```

### ❌ **Over-Documentation**
```typescript
// ❌ INCORRETO: Documentar o óbvio
/**
 * Retorna verdadeiro se o número é maior que zero
 */
const isPositive = (num: number): boolean => num > 0;

// ✅ CORRETO: Documentar o não-óbvio
/**
 * Valida CPF usando algoritmo de dígito verificador
 * @see https://pt.wikipedia.org/wiki/Cadastro_de_pessoas_físicas
 */
const isValidCPF = (cpf: string): boolean => {
  // Complex validation logic...
};
``` 